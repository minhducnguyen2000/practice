#Step 1: Load dataset
#load, read, and frame the dataset to "unpeople"
unpeople <- data.frame(read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vTdOKU6Hc-iNdhQ9soTgv0HFqXr9_FuigGqP4pfQWXEqXPEx1c8CjskTn2eso0VX3QYUPGlHivl-3F5/pub?gid=213778411&single=true&output=csv",stringsAsFactors =FALSE))
#check the dataset imported
head(unpeople)
nrow(unpeople)

#Step 2: Check each column for missing values and/or NAs and drop the observations that have them.
#install and load "nanỉar" packages to change all noisy values to NAs
install.packages("naniar")
library(naniar)
#change all the data with different expressions (N/A, Null or blank space) 
#                       to NA by using replace_with_na_all function
unpeople %>% replace_with_na_all(condition = ~.x %in% c("NA","","na"))
#check all NAs in the "unpeople" dataframe 
is.na(unpeople)
#remove the observations that have NA value and save back new dataframe to "unpeople"
unpeople <- na.omit(unpeople)
#check whether it eliminated observations
nrow(unpeople)

#Step 3: Change the object class of the column containing the dates to object of “class” = Date.
#Change Last_Reporting_Date column to Date object and store to date
date <- as.Date(unpeople$Last_Reporting_Date,"%d/%m/%Y")
#run to check
head(date)
#add the date list to the "unpeople" data frame which is eliminated Last_Reporting_Date column
unpeople <- cbind(date,unpeople[,-9])
#check the class of date column whether it is changed to Date object
class(unpeople$date)
#see the "unpeople" data frame
head(unpeople)

#Step 4:
total_personnel <- unpeople$Female_Personnel+unpeople$Male_Personnel
unpeople <-cbind(total_personnel,unpeople)
#create subset with only formed police units
formed_police <- subset(unpeople,unpeople$Personnel_Type=="Formed Police Units")
head(formed_police)
#create subset with only formed police units people reported in July 2020 from the formed_police subset
formed_police_2020 <- subset(formed_police,formed_police$date > as.Date("2020-06-30"),select = c("total_personnel","Female_Personnel","Male_Personnel"))
head(formed_police_2020)
percent_female_2020 <- sum(formed_police_2020$Female_Personnel)/sum(formed_police_2020$total_personnel)*100
percent_female_2020 <- round(percent_female_2020,digits = 1)
percent_female_2020
#use if() function to compare with the goal in 2028 whether we achieved or failed that goal
#print the result
if(percent_female_2020>=20){
  print("Goal achieved")
} else {
  print("Goal failed")
}


#Step 5: Plot the bar chart
#to create subset with a range of date, I import and use "dplyr" package to filter
install.packages("dplyr")
library(dplyr)
#calculate the percentage of woman in 2019
#create subset with only formed police units people reported in 2019
formed_police_2019 <- filter(formed_police,formed_police$date > as.Date("2018-12-31") & formed_police$date < as.Date("2020-01-01"))
head(formed_police_2019)
#calculate the percentage of woman in formed police units in 2019
percent_female_2019 <- sum(formed_police_2019$Female_Personnel)/sum(formed_police_2019$total_personnel)*100
percent_female_2019 <- round(percent_female_2019,digits = 1)
percent_female_2019

#create subset with only formed police units people reported in 2018
formed_police_2018 <- filter(formed_police,formed_police$date > as.Date("2017-12-31") & formed_police$date < as.Date("2019-01-01"))
head(formed_police_2018)
#calculate the percentage of woman in formed police units in 2018
percent_female_2018 <- sum(formed_police_2018$Female_Personnel)/sum(formed_police_2018$total_personnel)*100
percent_female_2018 <- round(percent_female_2018,digits = 1)
percent_female_2018

#create subset with only formed police units people reported in 2017
formed_police_2017 <- subset(formed_police,formed_police$date > as.Date("2016-12-31") & formed_police$date < as.Date("2018-01-01"))
head(formed_police_2017)
#calculate the percentage of woman in formed police units in 2017
percent_female_2017 <- sum(formed_police_2017$Female_Personnel)/sum(formed_police_2017$total_personnel)*100
percent_female_2017 <- round(percent_female_2017,digits = 1)
percent_female_2017

#create peryear data frame that contains years and percentage of female serving each year
peryear <- data.frame(year=c("2017","2018","2019","2020","2028"),percent=c(percent_female_2017,percent_female_2018,percent_female_2019,percent_female_2020,20))
peryear

#load the "tidyverse" and "ggplot2" packages used for plotting bar chart
library(tidyverse)
library(ggplot2)
#use ggplot function to plot the bar chart with year - X-variable and percent - Y-variable
plotbar <- ggplot(data=peryear, aes(x=year, y=percent)) +
  geom_bar(stat="identity", fill="pink")+
  geom_text(aes(label=percent), vjust=-0.3, size=3.5)+
  theme_minimal()
#print the bar chart plotted
plotbar


#Step 6:
#with those countries rotation, I stored them into "countries" variable
countries <- c("USA","KOR","IND","DEU","ARG","GBR")
#create a subset containing only observations of those countries and store in "ppcountries" variable
ppcountries <- filter(unpeople, unpeople$ISOCode3 %in% countries)
head(ppcountries)
#use trimws function to remove trailing space in the Mission_Acronym values and stored into "mission_rev" vector
mission_rev <- trimws(ppcountries$Mission_Acronym, which = c("both", "left", "right"),whitespace = "[ \t\r\n]")
#add "mission_rev" vector to the data frame ppcountries and remove the old mission-acronym 
#store back the new data frame to the ppcountries variable
ppcountries <- cbind(mission_rev,ppcountries[,-7])
head(ppcountries)
#create function with unique function to find the unique values from each countries and calculate the number of missions 
mission_fun <- function(i){
  mission_list <- unique(subset(ppcountries,ppcountries$ISOCode3==countries[i],select = "mission_rev"))
  total_mission <- nrow(mission_list)
  cat(countries[i],total_mission)
  print(mission_list)
}
sapply(1:length(countries),mission_fun)


#Step 7:
#create subset of MINUSMA 
minusma <- subset(unpeople,unpeople$Mission_Acronym=="MINUSMA")
head(minusma)
#group total personnel by date with aggregate function
minusma_group <- aggregate(minusma$total_personnel, by=list(unique.date=minusma$date), FUN=sum)
head(minusma_group)
#calculate average personnel in MINUSMA
avg_personnel <- mean(minusma_group$x)
cat("(a) Average number of personnel:",avg_personnel)
#median personnel in MINUSMA
median <- median(minusma_group$x)
cat("(b) Median number of personnel:",median)
#The 25th and 75th quantiles
quantile <- quantile(minusma_group$x)
quantile_25 = quantile[2]
cat("(c) 25th percentile of personnel:",quantile_25)
quantile_75 = quantile[4]
cat("(d) 75th percentile of personnel:",quantile_75)
#(c) When was the lowest point and how many troops were stationed there then? 
lowest_point <- subset(minusma_group,minusma_group$x == min(minusma_group$x))
cat("(e) Lowest number of troops:",lowest_point$x,"on",as.character.Date(lowest_point$unique.date))
#(d) When was the highest and how many?
highest_point <- subset(minusma_group,minusma_group$x == max(minusma_group$x))
cat("(f) Highest number of troops:",highest_point$x,"on",as.character.Date(highest_point$unique.date))


#extra part
#import the gpd data and store in gdp_capital data frame
gdp_capital <- data.frame(read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vTgwuQumqjffC6jPec0qsyut_nEwuOjfXx8AwvXCbfNWe5Njffqz7JLvHe6oANsPThPVCL9fu1xbc1T/pub?gid=1467247073&single=true&output=csv",stringsAsFactors =FALSE))
#print to check
head(gdp_capital)
#create subset with only gdp per captita of countries in 2017 and store in gdp_2017
gdp_2017 <- subset(gdp_capital,gdp_capital$Year==2017)
#print to check
head(gdp_2017)
#create a subset from unpeople data frame with observations reported in December 2017
personnel_2017 <- filter(unpeople,unpeople$date > as.Date("2017-11-30")&unpeople$date< as.Date("2018-01-01"))
head(personnel_2017)
#group the total personnels in all units by country codes and store into personnel_countries
personnel_countries <- aggregate(personnel_2017$total_personnel, by=list(country=personnel_2017$ISOCode3), FUN=sum)
head(personnel_countries)
#match the country codes in 2 different data frames and add gdp into personnel_countries data frame
personnel_countries$gdp <- gdp_2017$GDP.per.capita[match(personnel_countries$country, gdp_2017$Code)]
#change the name column 2 to "total_personnel"
names(personnel_countries)[2]<-paste("total_personnel")
#eliminate the obervations that have blank or NA values
personnel_countries <- na.omit(personnel_countries)
#print to check
head(personnel_countries)
#create the model of linear regression with gdp is independent variable and total personnel is dependent variable
#                       to predict total personnel given by gdp per capita
model <- lm(total_personnel~gdp,personnel_countries)
#print the summary of model
summary(model)
#plot the linear model
ggplot(personnel_countries, aes(x=total_personnel, y=gdp)) + geom_point() + stat_smooth(method = "lm", col="red", size = 1) + labs(
  x = "GDP Per Capita in 2017",
  y = "Total Personnel in each country in 2017",
  title = "Relationship between GDP Per Capita and total personnel")
# Comment: There is a significant (p value: 0.005<0.05) negative (slope= -0.02) relationship between 
#                           Total Personnel from each country and its GDP per Capita.
# We have the linear formula: total_personnel = 1134 - 0.02* gdp.
# Interpretively, with each 100 USD increased in GDP per capital of a country, 
#                   the total personnels that country sends to UN decreases around 2 people.

